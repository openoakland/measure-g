
<!DOCTYPE html>
<html>
    <head>
        <%- partial("partials/_header", { title: "Measure G - By Program"}) %>

        <!--Load the AJAX API. Do this only once per web page! -->
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
        <script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>
        <script type="text/javascript">
            google.charts.load('current', {'packages':['bar','corechart']});

            $(document).ready(function () {

                var programTotalsJson = [];
                var programs_chart;
                var programTotalData;

                function openProgramTab(programName) {
                    var dataWithHeaders = programSpecificData[programName];

                    var numBars = dataWithHeaders.length - 1;
                    var chartHeight = numBars * 70;

                    var data = google.visualization.arrayToDataTable(dataWithHeaders);

                    data.sort([{column: 4, desc:true}]);

                    var chart = new google.charts.Bar(document.getElementById('object_chart'));

                    google.visualization.events.addListener(chart, 'ready', function() {
                        document.body.scrollTop = document.documentElement.scrollTop = 0;
                    });

                    var options = {
                        chart: {
                        },
                        bars: 'horizontal', // Required for Material Bar Charts.
                        height: chartHeight,
                        width: $(window).width() * .8,
                        axes: {
                            x: {
                              0: { side: 'top', label: 'Amount spent'} // Top x-axis.
                            }
                        },
                        hAxis:{ format: '$#,###'}
                    };

                    chart.draw(data, google.charts.Bar.convertOptions(options));

                    $('.all-programs-data').removeClass('is-active');
                    $('#objects-tab').text(programName);
                    var programKey = _.findKey(supportedPrograms, function(val){return val == programName});
                    window.location.hash = programKey;
                    $('#objects-tab').data('program-key',programKey);

                    $('.object-level-data').addClass('is-active');
                    $('#objects-tab, .object-level-data').show();

                    $('#objects-tab').click();
                }

                function drawChart() {

                    programTotalData = google.visualization.arrayToDataTable(dataByProgram);

                    var options = {
                        height: 500,
                        width: $(window).width() * .8,
                        vAxis:{
                            format: '$#,###',
                            textStyle: {
                                fontSize: 14
                            }
                        },
                        hAxis: {
                            textStyle: {
                                fontSize: 14
                            }
                        }
                    };

                    programs_chart = new google.charts.Bar(document.getElementById('program-overview'));

                    programs_chart.draw(programTotalData, google.charts.Bar.convertOptions(options));
                    google.visualization.events.addListener(programs_chart, 'select', selectHandler);

                    function selectHandler(e) {

                        var selection = programs_chart.getSelection();
                        var programName = programTotalData.getColumnLabel(selection[0].column);

                        if (selection.length > 0){
                            openProgramTab(programName);
                        }

                    } //end select handler

                };

                $(window).resize(function() {
                    drawChart();
                });

                var dataByProgram = [];
                var programSpecificData = [];

                // TODO: get dynamically from Years table (or set in config)
                var supportedYears = [
                    2012,
                    2013,
                    2014,
                    2015
                ];

                var yearToDisplay = {
                    2012: "2012-13",
                    2013: "2013-14",
                    2014: "2014-15",
                    2015: "2015-16",
                };

                var yearToRowMapping = {};
                var tableHeader = ['School Years'];

                // Dynamically create Google Visualization DataTable rows based on # of years
                for(var i = 0; i < supportedYears.length; i++){
                    var year = supportedYears[i];
                    var yearKey = year.toString();
                    yearToRowMapping[yearKey] = _.indexOf(supportedYears,year,true);
                    dataByProgram.push([yearToDisplay[year]]);
                }

                var overviewQuery = "SELECT  prog.short as program,a.year, COALESCE(SUM(ytd_actual), 0) as ytd_actual FROM programs prog, measure_g_actuals a WHERE prog.id = a.program_id GROUP BY program, a.year ORDER BY program, a.year";

                $.getJSON('https://jbaldo.cartodb.com/api/v2/sql/?q='+overviewQuery, function(data) {

                    var groupedByProgram = _.groupBy(data.rows, 'program');

                    _.each(groupedByProgram, function(yearsOfSpending, program){

                        // Dynamically create a row for every program
                        tableHeader.push(program);

                        // Instead of complex SQL joining,
                        // start with 0 value for each program and replace with spending if it exists
                        for (var i = 0; i < dataByProgram.length; i++) {
                            dataByProgram[i].push(0);
                        }

                        _.each(yearsOfSpending, function(year){
                            var row = yearToRowMapping[year.year];
                            var column = tableHeader.length - 1;
                            dataByProgram[row][column] = year.ytd_actual;
                        });

                    });

                    //Add the table header
                    dataByProgram.unshift(tableHeader);

                }).then(function(){
                    google.charts.setOnLoadCallback(drawChart);
                        var dataByObjects = [];

                        var allProgramsQuery = "SELECT p.short as program, o.short as object, SUM(ytd_actual) total, a.year " +
                            "FROM measure_g_actuals a, programs p, objects o " +
                            "WHERE a.object_id = o.id " +
                            "AND a.program_id = p.id " +
                            "GROUP BY o.short, p.short, a.year " +
                            "HAVING SUM(ytd_actual) > 1000 " +
                            "ORDER BY program, total";

                        var yearToColumnMapping = {};
                        var tableHeader = ['Expense Type'];

                        // Dynamically create Google Visualization DataTable columns based on # of years
                        for(var i = 0; i < supportedYears.length; i++){
                            var year = supportedYears[i];
                            var yearKey= year.toString();
                            yearToColumnMapping[yearKey] = _.indexOf(supportedYears,year,true);
                            tableHeader.push(yearToDisplay[yearKey]);
                        }

                        $.getJSON('https://jbaldo.cartodb.com/api/v2/sql/?q='+allProgramsQuery, function(data) {

                            _.each(_.groupBy(data.rows, 'program'), function(byProgram, program){

                                var dataByObjects = [];

                                _.each(_.groupBy(byProgram, 'object'),function (yearsOfSpending,object) {

                                    var objectSpendingByYear = [object];

                                    // Instead of complex SQL joining,
                                    // start with 0 value for each year and replace with spending if it exists
                                    for (var i = 0; i < supportedYears.length; i++) {
                                        objectSpendingByYear.push(0);
                                    }

                                    _.each(yearsOfSpending, function(year){
                                        var column = yearToColumnMapping[year.year] + 1;
                                        objectSpendingByYear[column] = year.total;
                                    });

                                    dataByObjects.push(objectSpendingByYear);

                                });

                                //Add a header
                                dataByObjects.unshift(tableHeader);

                                // All object spednign for this program is processed
                                // add entry for program
                                programSpecificData[program] = dataByObjects;

                            });

                            //get selected program from URL and open it
                            var selectedProgram = window.location.hash.slice(1);

                            if(selectedProgram in supportedPrograms) {
                                openProgramTab(supportedPrograms[selectedProgram]);
                            }

                        });
                });

                $('#all-programs-tab').click(function() {
                    window.location.hash = "";
                });

                $('#objects-tab').click(function(){
                    window.location.hash = $(this).data('program-key');
                });

                var supportedPrograms = {
                    'art': 'ART',
                    'basic-school-support': 'BASIC SCHOOL SUPPORT',
                    'class-size-reduction': "CLASS SIZE REDUCTION",
                    'elementary-intervention': "COVERED ELEM INTERVENTION PDS",
                    'hr-recruitment': "HR Recruitment",
                    'middle-school-electives': "MIDDLE SCHOOL ELECTIVES",
                    'music': "MUSIC",
                    'nclb-hqt-compliance': "NCLB HQT COMPLIANCE",
                    'arts-summer-school': "Oakland Fine Arts Summer Schl",
                    'oratorical-fest': "ORATORICAL FEST/PERFORMANCES",
                    'oth-programs': "OTH PROGRAMS / LOCAL GOALS",
                    'libraries':"SCHOOL LIBRARIES"
                }

                /// programs part
                // (function() {

                //Get Data from CartoDb
                // var sql = "SELECT p.short as program, o.short as object, SUM(ytd_actual) total, a.year " +
                //     "FROM measure_g_actuals a, programs p, objects o " +
                //     "WHERE a.object_id = o.id " +
                //     "AND a.program_id = p.id " +
                //     "GROUP BY o.short, p.short, a.year " +
                //     "HAVING SUM(ytd_actual) > 1000 " +
                //     "ORDER BY program, total";

                // // TODO: get dynamically from Years table (or set in config)
                // var supportedYears = [
                //     2012,
                //     2013,
                //     2014,
                //     2015
                // ];

                // var yearToDisplay = {
                //     2012: "2012-13",
                //     2013: "2013-14",
                //     2014: "2014-15",
                //     2015: "2015-16",
                // };

                // var yearToColumnMapping = {};
                // var tableHeader = ['Expense Type'];

                // Dynamically create Google Visualization DataTable columns based on # of years
                // for(var i = 0; i < supportedYears.length; i++){
                //     var year = supportedYears[i];
                //     var yearKey= year.toString();
                //     yearToColumnMapping[yearKey] = _.indexOf(supportedYears,year,true);
                //     tableHeader.push(yearToDisplay[yearKey]);
                // }
                // Group objects by program

                // var dataByProgram = {};

                // Callback that creates and populates a data table,
                // instantiates the chart, passes in the data and draws it.

                // function drawChart() {

                //     function updateChartData(programId) {
                        // window.location.hash = programId;
                        // var programDataKey = supportedPrograms[programId];
                        // var dataWithHeaders = dataByProgram[programDataKey];

                //         var numBars = dataWithHeaders.length - 1;
                //         var chartHeight = numBars * 70;

                //         var data = google.visualization.arrayToDataTable(dataWithHeaders);

                //         data.sort([{column: 4, desc:true}]);

                //         var chart = new google.charts.Bar(document.getElementById('chart_div'));

                //         google.visualization.events.addListener(chart, 'ready', function() {
                //             document.body.scrollTop = document.documentElement.scrollTop = 0;
                //         });

                //         var options = {
                //             chart: {
                //             },
                //             bars: 'horizontal', // Required for Material Bar Charts.
                //             height: chartHeight,
                //             axes: {
                //                 x: {
                //                   0: { side: 'top', label: 'Amount spent'} // Top x-axis.
                //                 }
                //             },
                //             hAxis:{ format: '$#,###'}
                //         };

                //         chart.draw(data, google.charts.Bar.convertOptions(options));
                //         $('#program-select div').removeClass('active');
                //         $('#program-select #'+programId).addClass('active');
                //         document.body.scrollTop = document.documentElement.scrollTop = 0;
                //     }

                    // updateChartData(selectedProgram);
                    // $('#program-select #'+selectedProgram).addClass('active');

                    // $('#program-select').click(function(event) {
                    //     updateChartData(event.target.id);
                    // });

                // }

                // $.getJSON('https://jbaldo.cartodb.com/api/v2/sql/?q='+sql, function(data) {

                //     _.each(_.groupBy(data.rows, 'program'), function(byProgram, program){

                //         var dataByObjects = [];

                //         _.each(_.groupBy(byProgram, 'object'),function (yearsOfSpending,object) {

                //             var objectSpendingByYear = [object];

                //             // Instead of complex SQL joining,
                //             // start with 0 value for each year and replace with spending if it exists
                //             for (var i = 0; i < supportedYears.length; i++) {
                //                 objectSpendingByYear.push(0);
                //             }

                //             _.each(yearsOfSpending, function(year){
                //                 var column = yearToColumnMapping[year.year] + 1;
                //                 objectSpendingByYear[column] = year.total;
                //             });

                //             dataByObjects.push(objectSpendingByYear);

                //         });

                //         //Add a header
                //         dataByObjects.unshift(tableHeader);

                //         // All object spednign for this program is processed
                //         // add entry for program
                //         dataByProgram[program] = dataByObjects;

                //     });


                // }).done(function(){
                //     // Load the Visualization API
                //     google.load('visualization', '1.1', {'packages':['bar'], 'callback': drawChart});
                // });

                // })();

            });
        </script>

        <!--Google analytics snippet -->
          <script>
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', 'UA-35908939-11', 'auto');
            ga('send', 'pageview');

          </script>
    </head>
    <body>

        <!-- Wrap all page content here -->
        <div id="wrap">

            <%- partial("partials/_navbar") %>

          <!-- Begin page content -->
          <div class="center-container">

            <div class="center-row">
                <div class="container">
<!--                     <div id="program-select">
                        <div class="program" id="art">Art</div>
                        <div class="program" id="basic-school-support">Basic School Support</div>
                        <div class="program" id="class-size-reduction">Class Size Reduction</div>
                        <div class="program" id="elementary-intervention">Elementary Intervention</div>
                        <div class="program" id="hr-recruitment">HR + Recruitment</div>
                        <div class="program" id="libraries">Libraries</div>
                        <div class="program" id="arts-summer-school">Oakland Fine Arts Summer School</div>
                        <div class="program" id="middle-school-electives">Middle School Electives</div>
                        <div class="program" id="nclb-hqt-compliance">NCLB Compliance</div>
                        <div class="program" id="music">Music</div>
                    </div>

                    <h3>How is money spent on this program across the district?</h3>

                    <div id="chart_div"></div> -->
                    <div class="row">
                        <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect" id="tabs">
                            <div class="mdl-tabs__tab-bar">
                                <a href="#all-programs-panel" class="mdl-tabs__tab is-active all-programs-data" id="all-programs-tab">All Programs</a>
                                <a href="#objects-panel" class="mdl-tabs__tab object-level-data" id="objects-tab" style="display:none"></a>
                            </div>
                            <div class="mdl-tabs__panel is-active all-programs-data" id="all-programs-panel">
                                <div id="program-overview"></div>
                            </div>
                            <div class="mdl-tabs__panel object-level-data" id="objects-panel" style="display: none">
                                <h3>How is money spent on this program across the district?</h3>
                                <div id="object_chart"></div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>


          </div>

        </div> <!-- end wrap -->

        <%- partial("partials/_uservoice.ejs") %>
    </body>
</html>
